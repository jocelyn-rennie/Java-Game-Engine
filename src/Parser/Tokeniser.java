package org.uob.a2.parser;

import java.util.ArrayList;

/**
 * The {@code Tokeniser} class is responsible for converting a string input into a list of tokens
 * that can be parsed into commands by the game.
 * 
 * <p>
 * The tokeniser identifies keywords, variables, and special symbols, assigning each a {@code TokenType}.
 * </p>
 */
public class Tokeniser 
{
    ArrayList<Token> tokens;
    
    public Tokeniser()
    {
        this.tokens = new ArrayList<Token>();
    }

    //Retrieves the list of tokens generated by the tokeniser.
    public ArrayList<Token> getTokens()
    {
        return tokens;
    }

    //Sanitises the input string by converting it to lowercase and trimming whitespace.
    public String sanitise(String s)
    {
        String returnStr = s.toLowerCase();
        returnStr = returnStr.trim();
        return returnStr;
    }

    //Tokenises the input string into a list of Token objects based on predefined keywords and patterns.
    public void tokenise(String s)
    {
        //clears tokens of last input
        tokens.clear();
        s = sanitise(s);

        // tests don't like
        /*
        String[] words = s.split("\\s+"); // Splits by whitespace
        Token wordToken;

        // this makes sure it is the right format or adds an error token
        switch(words[0])
        {
            //error?
            case "use": 
                wordToken = new Token(TokenType.valueOf("USE"));
                tokens.add(wordToken);
                if(words.length > 1)
                {
                    if(TokenType.contains(words[1].toUpperCase()))
                    {
                        wordToken = new Token(TokenType.valueOf("ERROR"));
                        tokens.add(wordToken);
                    }
                    else
                    {
                        wordToken = new Token(TokenType.valueOf("VAR"),words[1]);
                        tokens.add(wordToken);

                        if(words.length > 2)
                        {
                            if(words[2] == "on" || words[2] == "with" || words[2] == "using")
                            {
                                wordToken = new Token(TokenType.valueOf("PREPOSITION"),words[2]);
                                tokens.add(wordToken);

                                if(words.length > 3)
                                {
                                    if(TokenType.contains(words[3].toUpperCase()))
                                    {
                                        wordToken = new Token(TokenType.valueOf("ERROR"));
                                        tokens.add(wordToken);
                                    }
                                    else
                                    {
                                        wordToken = new Token(TokenType.valueOf("VAR"),words[3]);
                                        tokens.add(wordToken);
                                        if(words.length > 4)
                                        {
                                            wordToken = new Token(TokenType.valueOf("ERROR"));
                                            tokens.add(wordToken);
                                        }
                                    }
                                }
                                else
                                {
                                    wordToken = new Token(TokenType.valueOf("ERROR"));
                                    tokens.add(wordToken);
                                }
                            }
                            else
                            {
                                wordToken = new Token(TokenType.valueOf("ERROR"));
                                tokens.add(wordToken);
                            }
                        }
                    }
                }
                else
                {
                    wordToken = new Token(TokenType.valueOf("ERROR"));
                    tokens.add(wordToken); break;
                } break;
            case "get": 
                wordToken = new Token(TokenType.valueOf("GET"));
                tokens.add(wordToken); 
                if(words.length > 1)
                {
                    if(TokenType.contains(words[1].toUpperCase()))
                    {
                        wordToken = new Token(TokenType.valueOf("ERROR"));
                        tokens.add(wordToken);
                    }
                    else
                    {
                        wordToken = new Token(TokenType.valueOf("VAR"),words[1]);
                        tokens.add(wordToken);
                        if(words.length > 2)
                        {
                            wordToken = new Token(TokenType.valueOf("ERROR"));
                            tokens.add(wordToken);
                        }
                    }
                }
                else
                {
                    wordToken = new Token(TokenType.valueOf("ERROR"));
                    tokens.add(wordToken);
                }
                break;
            case "drop": 
                wordToken = new Token(TokenType.valueOf("DROP"));
                tokens.add(wordToken); 
                if(words.length > 1)
                {
                    if(TokenType.contains(words[1].toUpperCase()))
                    {
                        wordToken = new Token(TokenType.valueOf("ERROR"));
                        tokens.add(wordToken);
                    }
                    else
                    {
                        wordToken = new Token(TokenType.valueOf("VAR"),words[1]);
                        tokens.add(wordToken);
                        if(words.length > 2)
                        {
                            wordToken = new Token(TokenType.valueOf("ERROR"));
                            tokens.add(wordToken);
                        }
                    }
                }
                else
                {
                    wordToken = new Token(TokenType.valueOf("ERROR"));
                    tokens.add(wordToken);
                }
                break;
            case "look": 
                wordToken = new Token(TokenType.valueOf("LOOK"));
                tokens.add(wordToken); 
                if(words.length > 1)
                {
                    if(TokenType.contains(words[1].toUpperCase()))
                    {
                        wordToken = new Token(TokenType.valueOf("ERROR"));
                        tokens.add(wordToken);
                    }
                    else
                    {
                        wordToken = new Token(TokenType.valueOf("VAR"),words[1]);
                        tokens.add(wordToken);
                        if(words.length > 2)
                        {
                            wordToken = new Token(TokenType.valueOf("ERROR"));
                            tokens.add(wordToken);
                        }
                    }
                }
                //cannot have look and no specifier
                else
                {
                    wordToken = new Token(TokenType.valueOf("ERROR"));
                    tokens.add(wordToken);
                }
                break;
            case "status": 
                wordToken = new Token(TokenType.valueOf("STATUS"));
                tokens.add(wordToken); 
                if(words.length > 1)
                {
                    if(TokenType.contains(words[1].toUpperCase()))
                    {
                        wordToken = new Token(TokenType.valueOf("ERROR"));
                        tokens.add(wordToken);
                    }
                    else
                    {
                        wordToken = new Token(TokenType.valueOf("VAR"),words[1]);
                        tokens.add(wordToken);
                        if(words.length > 2)
                        {
                            wordToken = new Token(TokenType.valueOf("ERROR"));
                            tokens.add(wordToken);
                        }
                    }
                }
                break;
            case "help": 
                wordToken = new Token(TokenType.valueOf("HELP"));
                tokens.add(wordToken); 
                if(words.length > 1)
                {
                    if(TokenType.contains(words[1].toUpperCase()))
                    {
                        wordToken = new Token(TokenType.valueOf("ERROR"));
                        tokens.add(wordToken);
                    }
                    else
                    {
                        wordToken = new Token(TokenType.valueOf("VAR"),words[1]);
                        tokens.add(wordToken);
                        if(words.length > 2)
                        {
                            wordToken = new Token(TokenType.valueOf("ERROR"));
                            tokens.add(wordToken);
                        }
                    }
                }
                break;
            case "quit": 
                wordToken = new Token(TokenType.valueOf("QUIT"));
                tokens.add(wordToken); 
                if(words.length > 1)
                {
                    wordToken = new Token(TokenType.valueOf("ERROR"));
                    tokens.add(wordToken);
                }
                break;
            case "move": 
                wordToken = new Token(TokenType.valueOf("MOVE"));
                tokens.add(wordToken); 
                if(words.length > 1)
                {
                    if(TokenType.contains(words[1].toUpperCase()))
                    {
                        wordToken = new Token(TokenType.valueOf("ERROR"));
                        tokens.add(wordToken);
                    }
                    else
                    {
                        wordToken = new Token(TokenType.valueOf("VAR"),words[1]);
                        tokens.add(wordToken);
                        if(words.length > 2)
                        {
                            wordToken = new Token(TokenType.valueOf("ERROR"));
                            tokens.add(wordToken);
                        }
                    }
                }
                else
                {
                    wordToken = new Token(TokenType.valueOf("ERROR"));
                    tokens.add(wordToken);
                }
                break;
            default:
                wordToken = new Token(TokenType.valueOf("ERROR"));
                tokens.add(wordToken); break;
        }
        */

        String[] words = s.split("\\s+"); // Splits by whitespace
        Token wordToken;
        int length = words.length;
        
        for(int i = 0; i < length; i++)
        {
            switch(words[i])
            {
                case "use":
                   wordToken = new Token(TokenType.valueOf("USE"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "get":
                   wordToken = new Token(TokenType.valueOf("GET"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "drop":
                   wordToken = new Token(TokenType.valueOf("DROP"),words[i]);
                    tokens.add(wordToken);
                    break;
                case "look":
                   wordToken = new Token(TokenType.valueOf("LOOK"),words[i]);
                    tokens.add(wordToken);
                    break;
                case "status":
                   wordToken = new Token(TokenType.valueOf("STATUS"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "help":
                   wordToken = new Token(TokenType.valueOf("HELP"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "quit":
                   wordToken = new Token(TokenType.valueOf("QUIT"),words[i]);
                    tokens.add(wordToken);
                    break;
                case "move":
                   wordToken = new Token(TokenType.valueOf("MOVE"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "on":
                   wordToken = new Token(TokenType.valueOf("PREPOSITION"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "with":
                   wordToken = new Token(TokenType.valueOf("PREPOSITION"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "using":
                   wordToken = new Token(TokenType.valueOf("PREPOSITION"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "and":
                    wordToken = new Token(TokenType.valueOf("PREPOSITION"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "to":
                    wordToken = new Token(TokenType.valueOf("PREPOSITION"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "make":
                    wordToken = new Token(TokenType.valueOf("PREPOSITION"),words[i]); 
                    tokens.add(wordToken);
                    break;
                case "combine":
                    wordToken = new Token(TokenType.valueOf("COMBINE"),words[i]); 
                    tokens.add(wordToken);
                    break;
                default:
                    wordToken = new Token(TokenType.valueOf("VAR"),words[i]);
                    tokens.add(wordToken);
                    break;
            }
        }
        // adds end of line when 
        wordToken = new Token(TokenType.valueOf("EOL"));
        tokens.add(wordToken);

    }

    
}
